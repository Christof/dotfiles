set nocompatible

" -----------------------------------------------------------
" Setup Vundle
" -----------------------------------------------------------

filetype off                  " required!

set rtp+=~/.vim/bundle/vundle
call vundle#rc("~/.vundle")

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Bundles
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/syntastic'
" install guide: https://github.com/Valloric/YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'
Bundle 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-surround'
Bundle 'mileszs/ack.vim'

" Color themes
Bundle 'altercation/vim-colors-solarized'
Bundle 'jonathanfilip/vim-lucius'
Bundle 'tomasr/molokai'
Bundle 'ratazzi/blackboard.vim'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
"Bundle 'git://git.wincent.com/command-t.git'
"
" Additional bundles and before configuration like <leader>
if filereadable(expand("~/.vim/before.vimrc"))
  source ~/.vim/before.vimrc
endif

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.

syntax on

set t_Co=256

" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set listchars=tab:>-,trail:·,extends:>,eol:¬
set backspace=indent,eol,start    " backspace through everything in insert mode


" always show status bar
set laststatus=2

" always show line numbers
set number

" Join two lines with <C-j>
nnoremap <C-j> :join<CR>

" tab navigation
nnoremap <C-tab>   :tabnext<CR>
nnoremap <S-k>     :tabnext<CR>
nnoremap <S-j>     :tabprevious<CR>
nnoremap <C-t>     :tabnew<CR>

" open vimrc in new tab
nmap <leader>v :tabedit $MYVIMRC<CR>

" Bind ack to <Leader>f
nnoremap <Leader>f :Ack 

" Disable background color erase
" This caused problems in tmux
set t_ut=

" clang-format
map <Leader>k :%pyf ~/.janus/clang-format.py<CR>
imap <C-K> <ESC>:pyf ~/.janus/clang-format.py<CR>i

" create not existing directories
" code from
" http://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
augroup END
autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))

" -----------------------------------------------------------
" Plugin configuration
" -----------------------------------------------------------
" vim-latex
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf='pdflatex -shell-escape -interaction=nonstopmode $*'

" Syntastic
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'
" Automatically show error list
let g:syntastic_auto_loc_list = 1
" Make the list a little shorter
let g:syntastic_loc_list_height = 5

" airline
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
set noshowmode

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'
" handle conflict with YouCompleteMe
function! g:UltiSnips_Complete()
    call UltiSnips_ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips_JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"

" YouCompleteMe
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

" fugitive
nnoremap <leader>gs :Gstatus<CR>

" Customizations like colortheme or key bindings
if filereadable(expand("~/.vim/after.vimrc"))
  source ~/.vim/after.vimrc
endif

" Source this file when it's saved
if has("autocmd")
  autocmd! bufwritepost .vimrc source $MYVIMRC
endif
