{
	/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
*/
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log($1);"
		],
		"description": "Log output to console"
	},
	"Print also to console": {
		"prefix": "cl",
		"body": [
			"console.log($1);"
		],
		"description": "Log output to console"
	},
	"Create test function": {
		"prefix": "it",
		"body": [
			"it(`${1:description}`, () => {",
			"  ${0}",
			"});"
		],
		"description": "Open a testing funtion"
	},
	"Create beforeEach function": {
		"prefix": "be",
		"body": [
			"beforeEach(() => {",
			"  ${0}",
			"});"
		],
		"description": "Open a beforeEach funtion"
	},
	"Create async test function": {
		"prefix": "ita",
		"body": [
			"it(`${1:description}`, async () => {",
			"  ${0}",
			"});"
		],
		"description": "Open an async testing funtion"
	},
	"Create fakeAsync test function": {
		"prefix": "itfa",
		"body": [
			"it(`${1:description}`, fakeAsync(() => {",
			"  ${0}",
			"}));"
		],
		"description": "Open a fakeAsync testing funtion"
	},
	"Describe test group": {
		"prefix": "desc",
		"body": [
			"describe(`${1:description}`, () => {",
			"  ${0}",
			"});"
		],
		"description": "Open a testing funtion"
	},
	"Comment block": {
		"prefix": "comment",
		"body": [
			"/**",
			" * ${0}",
			" */"
		],
		"description": "Adds a comment block"
	},
	"Set Timeout Function": {
		"prefix": "settimeout",
		"body": [
			"setTimeout(() => {",
			"  ${0}",
			"}, ${1:timeout});"
		],
		"description": "Adds a setTimeout callback"
	},
	"Try catch block": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"  ${0}",
			"} catch (error) {",
			"  throw error;",
			"}"
		],
		"description": "Try catch block"
	},
	"Try catch response": {
		"prefix": "trycatchres",
		"body": [
			"try {",
			"  ${0}",
			"} catch (error) {",
			"  return sendError(res, error);",
			"}"
		],
		"description": "Try catch for sending error response"
	},
	"beforeEach ngOnInit": {
		"prefix": "beforeinit",
		"body": [
			"beforeEach(async () => await component.ngOnInit());",
			"",
			"${0}"
		],
		"description": "1 line beforeEach block with ngOnInit()"
	},
	"beforeEach ngOnInit block": {
		"prefix": "beforeinitblock",
		"body": [
			"beforeEach(async () => {",
			"  await component.ngOnInit();",
			"})",
			"",
			"${0}"
		],
		"description": "beforeEach block with ngOnInit()"
	},
	"describe only block": {
		"prefix": "describeonly",
		"body": [
			"describe.only(`${1:description}`, () => {",
			"  ${0}",
			"});"
		],
		"description": "Open a testing only funtion"
	},
	"resMock default error": {
		"prefix": "defaultResMockError",
		"body": [
			"resMock.setup(m => m.send('error')).verifiable(Times.once());",
			"resMock.setup(m => m.status(500)).returns(() => resMock.object).verifiable(Times.once());"
		],
		"description": "return res.status(500).send('error')"
	}
}
