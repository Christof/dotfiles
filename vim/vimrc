set nocompatible

" -----------------------------------------------------------
" Setup Vundle
" -----------------------------------------------------------

filetype off                  " required!

set rtp+=~/.vim/bundle/vundle
call vundle#begin("~/.vundle")

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Bundles
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/syntastic'
" install guide: https://github.com/Valloric/YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'
Bundle 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'
Bundle 'guns/vim-clojure-static'
Bundle 'tpope/vim-fireplace'
Bundle 'vim-scripts/paredit.vim'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'mileszs/ack.vim'
Bundle 'mattn/emmet-vim'
Bundle 'sjl/gundo.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'Shutnik/jshint2.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'marijnh/tern_for_vim'
Bundle 'Lokaltog/vim-easymotion'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'lfilho/cosco.vim'
Plugin 'editorconfig/editorconfig-vim'

" Color themes
Plugin 'https://github.com/vim-scripts/ScrollColors'
Bundle 'altercation/vim-colors-solarized'
Bundle 'jonathanfilip/vim-lucius'
Bundle 'tomasr/molokai'
Bundle 'ratazzi/blackboard.vim'
Bundle 'sjl/badwolf'
Bundle 'Lokaltog/vim-distinguished'
Plugin 'flazz/vim-colorschemes'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
"Bundle 'git://git.wincent.com/command-t.git'
call vundle#end()
"
" Additional bundles and before configuration like <leader>
if filereadable(expand("~/.vim/before.vimrc"))
  source ~/.vim/before.vimrc
endif

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.

syntax on

set t_Co=256
set hidden

" Increase command history capacity
set history=400

set autoread
set autowriteall

" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set listchars=tab:>-,trail:·,extends:>,eol:¬
set backspace=indent,eol,start    " backspace through everything in insert mode

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" always show status bar
set laststatus=2

" Always show some context
set scrolloff=3
set sidescrolloff=5

" Disable backup and swap files
set nobackup
set noswapfile

" always show line numbers
set number

" enable per project vimrc files, but disable unsafe commands
set exrc
set secure

" tab navigation
nnoremap <C-tab>   :tabnext<CR>
nnoremap <S-k>     :tabnext<CR>
nnoremap <S-j>     :tabprevious<CR>
nnoremap <C-t>     :tabnew<CR>

" buffer navigation
nnoremap <silent> <Leader>b :bprevious<CR>
nnoremap <silent> <Leader>B :bnext<CR>
nnoremap <silent> <Leader>a :b#<CR> " alternate buffer

" Enable 'scrolling with filtering' using <C-p> and <C-n>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Join two lines
nnoremap <Leader>j :join<CR>

" repeate last substitution with same flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" map ` to <Leader>m because it doesn't work on german keyboards
nnoremap <Leader>m `

" map <C-]> to <Leader>g
nnoremap <Leader>g <C-]>

" open vimrc in new tab
nmap <leader>v :tabedit $MYVIMRC<CR>

" Bind ack to <Leader>f
nnoremap <Leader>f :Ack

" map <C-]> to <Leader>g
nnoremap <Leader>g <C-]>

" map jk to esc
inoremap jk <esc>

" Write file as super user
cnoremap wsu w !sudo tee % > /dev/null

" Disable background color erase
" This caused problems in tmux
set t_ut=

" Don't interpret numbers with leading 0 as octal numbers (e.g <C-A> on 007
" yields 008 and not 010
set nrformats=

" uses paste mode when pasting from the clipboard in insert mode
" and leaves it immeadiately after
inoremap <C-v> <esc>:set paste<cr>a<C-r>+<esc>:set nopaste<cr>a
inoremap <C-b> <esc>:set paste<cr>a<C-r>*<esc>:set nopaste<cr>a

" Add dash as keyword so that autocompletion of lisp-style works
set iskeyword+=-

" Remap %:h<Tab> to %% for edit, write, saveas and read commands
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Autosave when focus is lost
au BufLeave,FocusLost * silent! update

"Wrap enables wrapping and rebinds j and k
command! -nargs=* Wrap call s:EnableWrap()
function s:EnableWrap()
  set wrap linebreak nolist
  nnoremap k gk
  nnoremap j gj
endfunction

" Qargs command which populates the args with all files in the quickfix
" list
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" create not existing directories
" code from
" http://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
augroup END
autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))

map <leader>k =G<CR>

" format xml
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" c++
au FileType cpp nnoremap <leader>c :vsp %<.cpp<CR><C-w><C-r>
au FileType cpp nnoremap <leader>h :vsp %<.h<CR>

" clang-format
au FileType cpp map <Leader>k :%pyf ~/.vim/clang-format.py<CR>
au FileType cpp imap <C-K> <ESC>:pyf ~/.vim/clang-format.py<CR>i

au FileType cpp set iskeyword-=-

" open .md files as markdown and not as modula2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" -----------------------------------------------------------
" Plugin configuration
" -----------------------------------------------------------
" vim-latex
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf='pdflatex -shell-escape -interaction=nonstopmode $*'

" Syntastic
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" Make the list a little shorter
let g:syntastic_loc_list_height = 5

" Ctrlp
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard']
let g:ctrlp_extensions = ['funky']
" Open Ctrlp prepopulated with the current filename without extension
" Can be used to switch between header and cpp files or test files
" Header and cpp files can be switched faster with <leader>h for header
" and <leader>c for cpp if they are in the same directory.
nmap <Leader>fs :let g:ctrlp_default_input = expand('%:t:r') \|
    \ call ctrlp#init(0) \| unlet g:ctrlp_default_input<CR>

" CtrlPFunky
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" airline
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
set noshowmode

" UltiSnips
let g:UltiSnipsEditSplit = 'vertical'
" handle conflict with YouCompleteMe
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsListSnippets="<c-e>"

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" don't ask before using YCM
let g:ycm_confirm_extra_conf = 0

" Tern for vim
au FileType javascript nnoremap <leader>jd :TernDef<CR>


" fugitive
nnoremap <leader>gs :Gstatus<CR>

" gundo
nnoremap <leader>u :GundoToggle<CR>

" cosco.vim
autocmd FileType javascript,css noremap <silent> <leader>, :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css inoremap <silent> <leader>, <c-o>:call cosco#commaOrSemiColon()<CR>

" Customizations like colortheme or key bindings
if filereadable(expand("~/.vim/after.vimrc"))
  source ~/.vim/after.vimrc
endif

" Source this file when it's saved
if has("autocmd")
  autocmd! bufwritepost vimrc source $MYVIMRC
endif
