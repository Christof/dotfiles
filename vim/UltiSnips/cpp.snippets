snippet guard "Guard for header files" b
#ifndef ${1:`!v substitute(toupper(expand('%:.')), "[./]", "_", "g")`_}

#define $1

$0

#endif  // $1
endsnippet

snippet ns "Namespace declaration" b!
namespace $1
{
$0
}  // namespace $1
endsnippet

snippet inc "#include local header (inc)" !
#include "./${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet doc "Documentation" b!
/**
 * \brief $1
 *
 * $2
 */
endsnippet

snippet cl "class .. (class)" !
/**
 * \brief $3
 *
 * $4
 */
class ${1:`!p 
def lower_case_underscore_to_camel_case(string):
    """Convert string or unicode from lower-case underscore to camel-case"""
    class_ = string.__class__
    splitted_string = string.split('_')
    # use string's class to work on the string to keep its type
    return class_.join('', map(class_.capitalize, splitted_string))
snip.rv = lower_case_underscore_to_camel_case(snip.basename.encode('ascii', 'ignore')) or "name"
`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

