
snippet if "if"
if (${1}) {
	${2}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10})
endsnippet


###########################################################################
#                             Customizations                              #
###########################################################################

snippet f "function" w
function(${1:args}) {
	$0
}${2:;}
endsnippet

snippet log "console.log call"
console.log($0);
endsnippet

snippet al "alert"
alert($0);
endsnippet

snippet ife "if - else" !b
if (${1:condition}) {
  ${2:truePath}
} else {
  ${3:falsePath}
}
endsnippet

snippet tc "try - catch" !b
try {
  ${1:statements}
} catch(err) {
  ${0:catch}
}
endsnippet

snippet vf "named function" !b
function ${1:function_name}(${2:args}) {
  $0
}
endsnippet

snippet tf "this.function"
this.${1:function_name} = function(${2:args}) {
	$0
};
endsnippet

snippet tv "this.variable"
this.${1:variable_name} = ${2:value};
endsnippet

snippet r "return"
return $0
endsnippet

snippet us "use strict" b
'use strict';

$0
endsnippet

snippet jsons "JSON.stringify" w
JSON.stringify(${1:obj}${2:, null, ${3:2}})
endsnippet

###############
#  AngularJS  #
###############

snippet s "$scope." w!
$scope.$0
endsnippet

snippet sf "$scope function" !
$scope.${1:function_name} = function(${2:args}) {
	$0
};
endsnippet

snippet sv "$scope variable" !
$scope.${1:var} = ${2:val};
endsnippet

snippet svc "$scope variable from constructor" !
$scope.${1:var} = $1;
endsnippet

snippet sw "scope watch" w
scope.$watch(${1:expression}, function(newVal, oldVal) {
	${2:if (newVal !== oldVal) {
		$3
	}}
	$0
});
endsnippet

snippet sa "scope apply" !b
scope.$apply($0);
endsnippet

snippet ngbi "get angular element by id" !w
angular.element(document.getElementById(${0:id}));
endsnippet

snippet ngfe "angular.forEach" !
angular.forEach(${1:var}, function(${2:value}, ${3:key}) {
	$0
});
endsnippet

snippet ngmfa "A factory in a module" w
factory('${1:factoryName}', function(${2:dependencies}) {
	var obj = {};

	$0

	return obj;
});
endsnippet

snippet ngmc "Define an Angular Module Controller" w
controller('${1:controllerName}', function($scope${2:injectables}) {
	$0
}),
endsnippet

snippet ngms "Define an Angular Module Service" w
service('${1:serviceName}', function(${2:injectables}) {
	$0
});
endsnippet

snippet ngmsi "Define Angular directive with injectables" !w
service('${1:serviceName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		$0
	}
]);
endsnippet

snippet ngmfi "Define an Angular Module Filter" w
filter('${1:filterName}', function(${2:injectables}) {
	return function(input, ${3:args}) {
		$0
	};
})
endsnippet

snippet ngmd "Define an Angular Module Directive" w
directive('${1:directiveName}', function() {
	return {
		restrict: 'A',
		$0
	};
});
endsnippet

global !p

def injectables(inj, snip):
	strings = inj.split(', ')
	indent = snip._initial_indent + '  '
	result = ''.join(["%s'%s',\n" % (indent, string) for string in strings])
	snip.rv = result
endglobal


snippet ngmdi "Define Angular directive with injectables" !w
directive('${1:directiveName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		return {
			restrict: 'A',
			$0
		};
	}
]);
endsnippet

snippet ngmdil "Define Angular directive with injectables" !w
directive('${1:directiveName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		return {
			restrict: '${3:A}',
			link: function(scope, element, attrs) {
				$0
			}
		};
	}
]);
endsnippet

snippet ngmdl "Angular directive with a link function" !w
directive('${1:directiveName}', function(${2:injectables}) {
	return {
		restrict: '${1:A}',
		link: function(scope, element, attrs) {
			$0
		}
	};
});
endsnippet

snippet ngds "Define an isolated scope in an Angular Directive" !b
scope: {
  $0
},
endsnippet

snippet ngdc "Define a controller inside an Angular Directive"
controller: function($scope, $element, $attrs${1}) {
	$2
},$0
endsnippet

snippet ngdl "Define a link function inside an Angular Directive"
link: function(scope, element, attrs) {
	$0
}
endsnippet

snippet ngea "Eval an elements attribute" b
scope.$eval(attrs.${0:attr});
endsnippet

snippet ngdr "Define restriction of an Angular Directive" !b
restrict: '${1:E}',
$0
endsnippet

snippet nglc "click event inside a link function" !b
element.bind('click', function(e) {
  $0
});
endsnippet

############
#  jsHint  #
############

snippet hg "let jshint ignore a global variable" !b
/* global ${0:variable} */
endsnippet

#############
#  Jasmine  #
#############

snippet ngj "angular jasmine file" !b
"use strict";

describe("${1:instance}", function() {
	beforeEach(module("${2:module}", function($provide) {
		$provide.${3:mock_injectables};
	}));

	describe("${4:function}", function() {
		${0:ait}
	});
});
endsnippet

snippet desc "Describe block"
describe('${1:description}', function() {
	$0
});
endsnippet

snippet bE "Before each"
beforeEach(function() {
	$0
});
endsnippet

snippet ait "Angular it block"
it('${1:description}', inject(function(${2:injectables}) {
	$0
}));
endsnippet

snippet it "it block"
it('${1:description}', function() {
	$0
});
endsnippet

snippet be "before each"
beforeEach(function() {
	$0
});
endsnippet

snippet abe "Angular before each"
beforeEach(module('${1:module}', function($provide) {
	$provide.value('${2:val}', ${3:obj})
}));
endsnippet

snippet ete "expect to equal" !b
expect(${1:actual}).toEqual(${0:expected});
endsnippet

snippet etb "expect to be" !b
expect(${1:actual}).toBe(${0:expected});
endsnippet

snippet ett "expect to be truthy" !b
expect(${1:actual}).toBeTruthy();
endsnippet

snippet etf "expect to be falsy" !b
expect(${1:actual}).toBeFalsy();
endsnippet

snippet etd "expect to be defined" !b
expect(${1:actual}).toBeDefined();
endsnippet

snippet etud "expect to be undefined" !b
expect(${1:actual}).toBeUndefined();
endsnippet

snippet etc "expect to contain" !b
expect(${1:actual}).toContain(${0:expected};
endsnippet

####################
#  ngdoc snippets  #
####################

snippet dd "ngdoc directive" !b
/**
 * @ngdoc directive
 * @name ${1:arethusa.}${2}
 * @restrict ${3:A}
 *
 * @description
 * ${4:TODO}
 *
 */
endsnippet

snippet ds "ngdoc service" !b
/**
 * @ngdoc service
 * @name ${1:arethusa.}${2}
 *
 * @description
 * ${4:TODO}
 *
 */
endsnippet

snippet df "ngdoc function" !b
/**
 * @ngdoc function
 * @name arethusa.core.globalSettings#$1
 * @methodOf arethusa.core.globalSettings
 *
 * @description
 * ${2:TODO}
 */
endsnippet

snippet dp "ngdoc param" !w
@param {${1}} ${2:name} ${3:description}
endsnippet

snippet dprs "ngdoc property (short)" !w
@property {${1}} ${2:name} ${3:description}
endsnippet

snippet dpr "ngdoc property" !w
/**
 * @ngdoc property
 * @name $1
 * @propertyOf arethusa.core.globalSettings
 * @description
 * ${2:TODO}
 */
endsnippet

snippet dq "ngdoc requires" !w
@requires ${1:arethusa.core.}$2
endsnippet

snippet dr "ngdoc return" !w
@returns {${1}} ${2}
endsnippet

snippet dl "ngdoc link" !w
{@link ${1:arethusa.}${2}}
endsnippet

snippet daf "ngdoc function through arethusa-ngdocs-generator" !b
// @arethusa-function
endsnippet

snippet dap "ngdoc property through arethusa-ngdocs-generator" !b
// @arethusa-property
endsnippet

snippet dae "ngdoc event through arethusa-ngdocs-generator" !b
// @arethusa-event
endsnippet

# vim:ft=snippets:
